# 4-print_square.txt

============================
How to Use 4-print_square.py
============================

``print_square(size)`` function for printing squares.

Usage
=====

The ``#`` character is used to print squares. The square's height
height and breadth are represented by the parameter ``size``

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

The function prints nothing if ``size`` is 0.

::

    >>> print_square(0)

Invalid Sizes
=============

``size`` parameter demands that it be an integer. If not a TypeError is thrown.

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

 ``size`` raises a ValueError if it is less than zero.

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Type-checking comes first, then value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

There must be at least one justification given.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() lacking 1 necessary positional argument: 'size'
