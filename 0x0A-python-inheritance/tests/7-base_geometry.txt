The module ``7-base_geometry`` 
============================

Using a ``BaseGeometry``
---------------------

Bring in a module function:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test for the correct class type:
    >>> bg = BaseGeometry()
    >>> type(bg) == BaseGeometry
    True


area() instance method
----------------------
an instance method is the area method:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

area method called through class no arguments provided:
    >>> bg.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

args test for the area method (1 arg):
    >>> bg.area(10)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

test using the area approach:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


integer_validator() instance method
-----------------------------------
instance method integer_validator:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

using the class integer_validator function without any arguments:
    >>> bg.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

aest (0 args) for the integer_validator method:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
arg test for the integer_validator method, 3 arguments:
    >>> bg.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

float.0 value for the integer_validator method:
    >>> bg.integer_validator("foo", 3.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

float.x value for the integer_validator method:
    >>> bg.integer_validator("arg", 3.14)
    Traceback (most recent call last):
    TypeError: arg must be an integer

string value for the integer_validator method.:
    >>> bg.integer_validator("Bar", "bar")
    Traceback (most recent call last):
    TypeError: Bar must be an integer

method integer_validator boolean value:
    >>> bg.integer_validator("zar", True)
    Traceback (most recent call last):
    TypeError: zar must be an integer

list value for the integer_validator method:
    >>> bg.integer_validator("a", [1])
    Traceback (most recent call last):
    TypeError: a must be an integer

method integer_validator Zero value:
    >>> bg.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

method integer_validator 0 value:
    >>> bg.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

negative value for the integer_validator method:
    >>> bg.integer_validator("key", -1000)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

ok value for the integer_validator method:
    >>> bg.integer_validator("key", 98)
    
method integer_validator ok value 2:
    >>> bg.integer_validator("key", 1)

empty string for the integer_validator method:
    >>> bg.integer_validator("", 1)

method empty string for integer_validator:
    >>> bg.integer_validator(None, 1)

the tuple integer_validator method:
    >>> bg.integer_validator("Foo", (1, 2))
    Traceback (most recent call last):
    TypeError: Foo must be an integer

method integer_validator dic:
    >>> bg.integer_validator("Foo", {1, 2})
    Traceback (most recent call last):
    TypeError: Foo must be an integer
